import pandas as pd
import openai
from tqdm import tqdm
from typing import List, Dict

def evaluate_answers(api_key: str, model_name: str, answers: List[Dict]) -> pd.DataFrame:
    '''
    Evaluate the generated answers using a judge model.

    Args:
        api_key (str): The API key for OpenAI.
        model_name (str): The name of the judge model to use.
        answers (List[Dict]): List of dictionaries containing:
            - question: The original question
            - oracle_answer: The ground truth answer
            - model_answer: The generated answer
            - article_id: The ID of the source article

    Returns:
        pd.DataFrame: DataFrame containing evaluation results with columns:
            Index, Question, Generated Answer, True Answer, Score, Reason, Article ID
    '''
    
    openai.api_key = api_key
    results = []

    for answer_dict in tqdm(answers, desc="Evaluating answers"):
        prompt = f"""Suppose you are expert in journalist, and you already learn the knowledge to answer the following question:
        
Question: {answer_dict['question']}
        
Here are the answers generated by the model and the oracle answer respectively:

Generated Answer: {answer_dict['model_answer']}

Oracle Answer: {answer_dict['oracle_answer']}

Please use your knowledge to score the generated answer. Give a scalar reward out of 100, and provide the reason. Your response should be in this exact format:

'''Score: {{score}}

Reason: The reason of this score is because ...'''

Otherwise, we can't extract the score and reason from your response."""

        response = openai.chat.completions.create(
            model=model_name,
            messages=[{"role": "user", "content": prompt}]
        )

        evaluation = response.choices[0].message.content
        
        # Extract score and reason
        score_start = evaluation.find('Score:') + len('Score:')
        reason_start = evaluation.find('Reason:')
        score = float(evaluation[score_start:reason_start].strip())
        reason = evaluation[reason_start + len('Reason:'):].strip()

        results.append({
            'Index': len(results),
            'Question': answer_dict['question'],
            'Generated Answer': answer_dict['model_answer'],
            'True Answer': answer_dict['oracle_answer'],
            'Score': score,
            'Reason': reason,
            'Article ID': answer_dict['article_id']
        })

    return pd.DataFrame(results)
